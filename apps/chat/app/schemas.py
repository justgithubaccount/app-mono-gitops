from pydantic import BaseModel, Field
from enum import Enum
from typing import List, Optional
from uuid import uuid4
from datetime import datetime

# ----------------------------------------
# üìå –†–æ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# ----------------------------------------
class Role(str, Enum):
    user = "user"
    assistant = "assistant"
    system = "system"

# ----------------------------------------
# üìå –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
# ----------------------------------------
class Message(BaseModel):
    role: Role
    content: str

# ----------------------------------------
# üìå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞ —á–∞—Ç–∞
# ----------------------------------------
class ChatRequest(BaseModel):
    messages: List[Message]
    user_api_key: Optional[str] = None

class ChatResponse(BaseModel):
    reply: str

# ----------------------------------------
# üìÇ –ü–∞–º—è—Ç—å –∏ –ø—Ä–æ–µ–∫—Ç—ã
# ----------------------------------------

class ChatMessage(BaseModel):
    role: Role
    content: str

class ChatHistory(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid4()))
    project_id: str
    messages: List[ChatMessage]
    timestamp: datetime = Field(default_factory=datetime.utcnow)

class CreateProjectRequest(BaseModel):
    name: str

class ProjectInfo(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid4()))
    name: str
