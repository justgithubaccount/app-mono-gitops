from pydantic import BaseModel, Field
from enum import Enum
from typing import List, Optional
from uuid import uuid4


# ----------------------------------------
# üìå –†–æ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# ----------------------------------------
class Role(str, Enum):
    user = "user"
    assistant = "assistant"
    system = "system"

# ----------------------------------------
# üìå –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
# ----------------------------------------
class Message(BaseModel):
    role: Role = Field(..., example="user")
    content: str = Field(..., example="Hello")

# ----------------------------------------
# üìå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞ —á–∞—Ç–∞
# ----------------------------------------
class ChatRequest(BaseModel):
    messages: List[Message] = Field(..., alias="messages", example=[{"role": "user", "content": "Hi"}])
    user_api_key: Optional[str] = Field(
        default=None,
        alias="userApiKey",
        example="sk-my-key"
    )

    class Config:
        populate_by_name = True

class ChatResponse(BaseModel):
    reply: str = Field(..., example="Hello, world")

# ----------------------------------------
# üìÇ –ü–∞–º—è—Ç—å –∏ –ø—Ä–æ–µ–∫—Ç—ã
# ----------------------------------------



class CreateProjectRequest(BaseModel):
    name: str = Field(..., example="My Project")

class ProjectInfo(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid4()), example="123e4567-e89b-12d3-a456-426614174000")
    name: str = Field(..., example="My Project")
